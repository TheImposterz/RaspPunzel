#!/bin/bash
# =================================================================================================
# RaspPunzel - Pentest WiFi Tools Installation Script
# =================================================================================================

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Load configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

if [[ -f "${PROJECT_ROOT}/config.sh" ]]; then
    source "${PROJECT_ROOT}/config.sh"
else
    echo -e "${RED}Error: config.sh not found${NC}"
    exit 1
fi

# Installation directory for tools
TOOLS_DIR="/usr/share"

echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}      RaspPunzel - Pentest WiFi Tools Installation${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo ""

# =================================================================================================
# Helper functions
# =================================================================================================

log_info() {
    echo -e "${YELLOW}[~] $1${NC}"
}

log_success() {
    echo -e "${GREEN}[+] $1${NC}"
}

log_error() {
    echo -e "${RED}[!] $1${NC}"
}

check_install() {
    local tool=$1
    if command -v "$tool" &>/dev/null; then
        log_success "$tool already installed"
        return 0
    else
        return 1
    fi
}

# =================================================================================================
# Category 1: Basic WiFi Audit Tools (from repositories)
# =================================================================================================

install_basic_tools() {
    log_info "Installing basic WiFi audit tools..."
    
    apt-get update -qq
    
    # WiFi cracking and auditing
    log_info "Installing wifite, reaver, bully, mdk4, mdk3, kismet..."
    apt-get install -y -qq wifite reaver bully mdk4 mdk3 kismet 2>/dev/null || {
        log_error "Some tools failed to install, continuing..."
    }
    
    log_success "Basic WiFi tools installed"
}

# =================================================================================================
# Category 2: Handshake Capture & Conversion Tools
# =================================================================================================

install_handshake_tools() {
    log_info "Installing handshake capture and conversion tools..."
    
    apt-get install -y -qq hcxdumptool hcxtools cowpatty dsniff 2>/dev/null || {
        log_error "Some tools failed to install, continuing..."
    }
    
    log_success "Handshake tools installed"
}

# =================================================================================================
# Category 3: Rogue AP & Evil Twin Tools
# =================================================================================================

install_rogue_ap_tools() {
    log_info "Installing rogue AP tools..."
    
    # Note: dnsmasq and hostapd already installed by setup-network.sh
    apt-get install -y -qq hostapd-wpe hostapd-mana 2>/dev/null || {
        log_error "hostapd-wpe/mana not available in repo, skipping..."
    }
    
    log_success "Rogue AP tools configured"
}

# =================================================================================================
# Category 4: EAP/Enterprise WiFi Tools
# =================================================================================================

install_eap_tools() {
    log_info "Installing EAP/Enterprise WiFi tools..."
    
    apt-get install -y -qq eapmd5pass asleap 2>/dev/null || {
        log_error "Some EAP tools failed to install, continuing..."
    }
    
    log_success "EAP tools installed"
}

# =================================================================================================
# Category 5: Additional Pentest Tools
# =================================================================================================

install_additional_tools() {
    log_info "Installing additional pentest tools..."
    
    # BeEF (Browser Exploitation Framework)
    if ! check_install beef-xss; then
        log_info "Installing beef-xss..."
        apt-get install -y -qq beef-xss 2>/dev/null || {
            log_error "beef-xss failed to install, skipping..."
        }
    fi
    
    # Bettercap
    if ! check_install bettercap; then
        log_info "Installing bettercap..."
        apt-get install -y -qq bettercap 2>/dev/null || {
            log_error "bettercap failed to install, skipping..."
        }
    fi
    
    log_success "Additional tools installed"
}

# =================================================================================================
# Category 6: Python2 Legacy Tools (deprecated but sometimes needed)
# =================================================================================================

install_python2_tools() {
    log_info "Installing Python2 legacy support..."
    
    # Check if Python2 is available
    if ! command -v python2 &>/dev/null; then
        log_error "Python2 not available, skipping Python2 tools..."
        return 1
    fi
    
    # Install pip2
    if ! command -v pip2 &>/dev/null; then
        log_info "Installing pip2..."
        cd /tmp
        curl -k https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py 2>/dev/null || {
            log_error "Failed to download pip2 installer"
            return 1
        }
        python2 get-pip.py || {
            log_error "Failed to install pip2"
            return 1
        }
    fi
    
    # Install Scapy for Python2
    log_info "Installing Scapy for Python2..."
    python2 -m pip install scapy --quiet 2>/dev/null || {
        log_error "Scapy installation failed"
    }
    
    # Install Scapy-com
    if [[ ! -d "${TOOLS_DIR}/Scapy-com" ]]; then
        log_info "Installing Scapy-com..."
        cd "${TOOLS_DIR}"
        git clone https://github.com/Tylous/Scapy-com.git --quiet 2>/dev/null || {
            log_error "Failed to clone Scapy-com"
            return 1
        }
        cd Scapy-com
        python2 setup.py install --quiet 2>/dev/null || {
            log_error "Scapy-com installation failed"
        }
    fi
    
    log_success "Python2 tools installed"
}

# =================================================================================================
# Category 7: Advanced WiFi Attack Frameworks
# =================================================================================================

install_wifipumpkin3() {
    log_info "Installing Wifipumpkin3..."
    
    if [[ -d "${TOOLS_DIR}/wifipumpkin3" ]]; then
        log_info "Wifipumpkin3 already exists, updating..."
        cd "${TOOLS_DIR}/wifipumpkin3"
        git pull --quiet 2>/dev/null || log_error "Update failed"
    else
        # Install dependencies
        apt-get install -y -qq libssl-dev libffi-dev build-essential python3-pyqt5 2>/dev/null
        
        cd "${TOOLS_DIR}"
        git clone https://github.com/P0cL4bs/wifipumpkin3.git --quiet 2>/dev/null || {
            log_error "Failed to clone Wifipumpkin3"
            return 1
        }
        cd wifipumpkin3
        python3 setup.py install 2>/dev/null || {
            log_error "Wifipumpkin3 installation failed"
            return 1
        }
        python3 -m pip install pyOpenSSL==19.0.0 --quiet 2>/dev/null
    fi
    
    log_success "Wifipumpkin3 installed"
}

install_wifiphisher() {
    log_info "Installing Wifiphisher..."
    
    if [[ -d "${TOOLS_DIR}/wifiphisher" ]]; then
        log_info "Wifiphisher already exists, updating..."
        cd "${TOOLS_DIR}/wifiphisher"
        git pull --quiet 2>/dev/null || log_error "Update failed"
    else
        # Install dependencies
        apt-get install -y -qq libnl-3-dev libnl-genl-3-dev 2>/dev/null
        
        cd "${TOOLS_DIR}"
        git clone https://github.com/wifiphisher/wifiphisher.git --quiet 2>/dev/null || {
            log_error "Failed to clone Wifiphisher"
            return 1
        }
        cd wifiphisher
        python3 setup.py install 2>/dev/null || {
            log_error "Wifiphisher installation failed"
            return 1
        }
    fi
    
    log_success "Wifiphisher installed"
}

install_fluxion() {
    log_info "Installing Fluxion..."
    
    if [[ -d "${TOOLS_DIR}/fluxion" ]]; then
        log_info "Fluxion already exists, updating..."
        cd "${TOOLS_DIR}/fluxion"
        git pull --quiet 2>/dev/null || log_error "Update failed"
    else
        cd "${TOOLS_DIR}"
        git clone https://github.com/FluxionNetwork/fluxion.git --quiet 2>/dev/null || {
            log_error "Failed to clone Fluxion"
            return 1
        }
    fi
    
    log_info "Note: Fluxion requires X (graphical) session to run"
    log_success "Fluxion installed"
}

install_eaphammer() {
    log_info "Installing EAPHammer..."
    
    if [[ -d "${TOOLS_DIR}/eaphammer" ]]; then
        log_info "EAPHammer already exists, updating..."
        cd "${TOOLS_DIR}/eaphammer"
        git pull --quiet 2>/dev/null || log_error "Update failed"
    else
        cd "${TOOLS_DIR}"
        git clone https://github.com/s0lst1c3/eaphammer.git --quiet 2>/dev/null || {
            log_error "Failed to clone EAPHammer"
            return 1
        }
        cd eaphammer
        
        log_info "Running EAPHammer setup (this may take a while)..."
        ./kali-setup 2>/dev/null || {
            log_error "EAPHammer setup failed"
            return 1
        }
        
        python3 -m pip install flask_cors flask_socketio --quiet 2>/dev/null
        python3 -m pip install --upgrade gevent --quiet 2>/dev/null
    fi
    
    log_success "EAPHammer installed"
}

install_airgeddon() {
    log_info "Installing Airgeddon..."
    
    if [[ -d "${TOOLS_DIR}/airgeddon" ]]; then
        log_info "Airgeddon already exists, updating..."
        cd "${TOOLS_DIR}/airgeddon"
        git pull --quiet 2>/dev/null || log_error "Update failed"
    else
        cd "${TOOLS_DIR}"
        git clone https://github.com/v1s1t0r1sh3r3/airgeddon.git --quiet 2>/dev/null || {
            log_error "Failed to clone Airgeddon"
            return 1
        }
    fi
    
    log_success "Airgeddon installed"
}

install_creap() {
    log_info "Installing crEAP..."
    
    if [[ -d "${TOOLS_DIR}/creap" ]]; then
        log_info "crEAP already exists, updating..."
        cd "${TOOLS_DIR}/creap"
        git pull --quiet 2>/dev/null || log_error "Update failed"
    else
        cd "${TOOLS_DIR}"
        git clone https://github.com/Shellntel/scripts.git creap --quiet 2>/dev/null || {
            log_error "Failed to clone crEAP"
            return 1
        }
    fi
    
    log_success "crEAP installed"
}

install_berate_ap() {
    log_info "Installing Berate_ap..."
    
    if [[ -d "${TOOLS_DIR}/berate_ap" ]]; then
        log_info "Berate_ap already exists, updating..."
        cd "${TOOLS_DIR}/berate_ap"
        git pull --quiet 2>/dev/null || log_error "Update failed"
    else
        cd "${TOOLS_DIR}"
        git clone https://github.com/sensepost/berate_ap.git --quiet 2>/dev/null || {
            log_error "Failed to clone Berate_ap"
            return 1
        }
    fi
    
    log_success "Berate_ap installed"
}

install_wpa_sycophant() {
    log_info "Installing WPA_Sycophant..."
    
    if [[ -d "${TOOLS_DIR}/wpa_sycophant" ]]; then
        log_info "WPA_Sycophant already exists, updating..."
        cd "${TOOLS_DIR}/wpa_sycophant"
        git pull --quiet 2>/dev/null || log_error "Update failed"
    else
        cd "${TOOLS_DIR}"
        git clone https://github.com/sensepost/wpa_sycophant.git --quiet 2>/dev/null || {
            log_error "Failed to clone WPA_Sycophant"
            return 1
        }
    fi
    
    log_success "WPA_Sycophant installed"
}

# =================================================================================================
# Main Installation Flow
# =================================================================================================

main() {
    echo -e "${YELLOW}This will install WiFi pentest tools. Continue? [Y/n]${NC}"
    read -r response
    if [[ $response =~ ^[Nn]$ ]]; then
        echo -e "${YELLOW}Installation cancelled${NC}"
        exit 0
    fi
    
    echo ""
    log_info "Starting pentest tools installation..."
    echo ""
    
    # Install in categories
    install_basic_tools
    echo ""
    
    install_handshake_tools
    echo ""
    
    install_rogue_ap_tools
    echo ""
    
    install_eap_tools
    echo ""
    
    install_additional_tools
    echo ""
    
    # Python2 tools (optional)
    echo -e "${YELLOW}Install Python2 legacy tools? (deprecated) [y/N]${NC}"
    read -r response
    if [[ $response =~ ^[Yy]$ ]]; then
        install_python2_tools
        echo ""
    fi
    
    # Advanced frameworks
    log_info "Installing advanced WiFi attack frameworks..."
    echo ""
    
    install_wifipumpkin3
    install_wifiphisher
    install_fluxion
    install_eaphammer
    install_airgeddon
    install_creap
    install_berate_ap
    install_wpa_sycophant
    
    # Update locate database
    log_info "Updating locate database..."
    updatedb 2>/dev/null || true
    
    # Summary
    echo ""
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${GREEN}      Pentest Tools Installation Complete${NC}"
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${BLUE}Installed tools:${NC}"
    echo ""
    echo -e "${YELLOW}Basic Tools:${NC}"
    echo "  - wifite, reaver, bully, mdk4, kismet"
    echo "  - hcxdumptool, hcxtools, cowpatty"
    echo ""
    echo -e "${YELLOW}Rogue AP:${NC}"
    echo "  - hostapd, hostapd-wpe, dnsmasq"
    echo ""
    echo -e "${YELLOW}Advanced Frameworks:${NC}"
    echo "  - Wifipumpkin3:  ${TOOLS_DIR}/wifipumpkin3"
    echo "  - Wifiphisher:   ${TOOLS_DIR}/wifiphisher"
    echo "  - Fluxion:       ${TOOLS_DIR}/fluxion"
    echo "  - EAPHammer:     ${TOOLS_DIR}/eaphammer"
    echo "  - Airgeddon:     ${TOOLS_DIR}/airgeddon"
    echo "  - crEAP:         ${TOOLS_DIR}/creap"
    echo "  - Berate_ap:     ${TOOLS_DIR}/berate_ap"
    echo "  - WPA_Sycophant: ${TOOLS_DIR}/wpa_sycophant"
    echo ""
    echo -e "${YELLOW}Update tools:${NC}"
    echo "  sudo ${SCRIPT_DIR}/update-pentest-tools.sh"
    echo ""
}

# Run main installation
main "$@"