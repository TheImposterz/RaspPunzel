#!/bin/bash
# =================================================================================================
# RaspPunzel - Pentest WiFi Tools Installation Script
# =================================================================================================

# NOTE: Ne pas utiliser set -e pour permettre la continuation même en cas d'erreur

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Load configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

if [[ -f "${PROJECT_ROOT}/config.sh" ]]; then
    source "${PROJECT_ROOT}/config.sh"
else
    echo -e "${RED}Error: config.sh not found${NC}"
    exit 1
fi

# Installation directory for tools
TOOLS_DIR="/usr/share"

# Arrays pour tracker les succès et échecs
declare -a INSTALLED_TOOLS
declare -a FAILED_TOOLS
declare -a SKIPPED_TOOLS

echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}      RaspPunzel - Pentest WiFi Tools Installation${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo ""

# =================================================================================================
# Helper functions
# =================================================================================================

log_info() {
    echo -e "${YELLOW}[~] $1${NC}"
}

log_success() {
    echo -e "${GREEN}[+] $1${NC}"
}

log_error() {
    echo -e "${RED}[!] $1${NC}"
}

check_install() {
    local tool=$1
    if command -v "$tool" &>/dev/null; then
        log_success "$tool already installed"
        return 0
    else
        return 1
    fi
}

track_success() {
    INSTALLED_TOOLS+=("$1")
}

track_failure() {
    FAILED_TOOLS+=("$1")
}

track_skipped() {
    SKIPPED_TOOLS+=("$1")
}

# =================================================================================================
# Category 1: Basic WiFi Audit Tools (from repositories)
# =================================================================================================

install_basic_tools() {
    log_info "Installing basic WiFi audit tools..."
    
    apt-get update -qq 2>/dev/null || {
        log_error "apt-get update failed, continuing anyway..."
    }
    
    # WiFi cracking and auditing
    local tools="wifite reaver bully mdk4 mdk3 kismet"
    for tool in $tools; do
        log_info "Installing $tool..."
        if apt-get install -y -qq "$tool" 2>/dev/null; then
            track_success "$tool"
            log_success "$tool installed"
        else
            track_failure "$tool"
            log_error "$tool installation failed"
        fi
    done
}

# =================================================================================================
# Category 2: Handshake Capture & Conversion Tools
# =================================================================================================

install_handshake_tools() {
    log_info "Installing handshake capture and conversion tools..."
    
    local tools="hcxdumptool hcxtools cowpatty dsniff"
    for tool in $tools; do
        log_info "Installing $tool..."
        if apt-get install -y -qq "$tool" 2>/dev/null; then
            track_success "$tool"
            log_success "$tool installed"
        else
            track_failure "$tool"
            log_error "$tool installation failed"
        fi
    done
}





# =================================================================================================
# Category 3: Additional Pentest Tools
# =================================================================================================

install_additional_tools() {
    log_info "Installing additional pentest tools..."
    
    # BeEF (Browser Exploitation Framework)
    if ! check_install beef-xss; then
        log_info "Installing beef-xss..."
        if apt-get install -y -qq beef-xss 2>/dev/null; then
            track_success "beef-xss"
            log_success "beef-xss installed"
        else
            track_failure "beef-xss"
            log_error "beef-xss installation failed"
        fi
    else
        track_success "beef-xss (already installed)"
    fi
    
    # Bettercap
    if ! check_install bettercap; then
        log_info "Installing bettercap..."
        if apt-get install -y -qq bettercap 2>/dev/null; then
            track_success "bettercap"
            log_success "bettercap installed"
        else
            track_failure "bettercap"
            log_error "bettercap installation failed"
        fi
    else
        track_success "bettercap (already installed)"
    fi
}

# =================================================================================================
# Category 4: Python2 Legacy Tools (deprecated but sometimes needed)
# =================================================================================================

install_python2_tools() {
    log_info "Installing Python2 legacy support..."
    
    # Check if Python2 is available
    if ! command -v python2 &>/dev/null; then
        log_error "Python2 not available, skipping Python2 tools..."
        track_skipped "Python2 tools (python2 not available)"
        return 1
    fi
    
    # Install pip2
    if ! command -v pip2 &>/dev/null; then
        log_info "Installing pip2..."
        cd /tmp
        if curl -k https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py 2>/dev/null; then
            if python2 get-pip.py 2>/dev/null; then
                track_success "pip2"
                log_success "pip2 installed"
            else
                track_failure "pip2"
                log_error "pip2 installation failed"
                return 1
            fi
        else
            track_failure "pip2"
            log_error "Failed to download pip2 installer"
            return 1
        fi
    else
        track_success "pip2 (already installed)"
    fi
    
    # Install Scapy for Python2
    log_info "Installing Scapy for Python2..."
    if python2 -m pip install scapy --quiet 2>/dev/null; then
        track_success "Scapy (Python2)"
        log_success "Scapy installed"
    else
        track_failure "Scapy (Python2)"
        log_error "Scapy installation failed"
    fi
    
    # Install Scapy-com
    if [[ ! -d "${TOOLS_DIR}/Scapy-com" ]]; then
        log_info "Installing Scapy-com..."
        cd "${TOOLS_DIR}"
        if git clone https://github.com/Tylous/Scapy-com.git --quiet 2>/dev/null; then
            cd Scapy-com
            if python2 setup.py install --quiet 2>/dev/null; then
                track_success "Scapy-com"
                log_success "Scapy-com installed"
            else
                track_failure "Scapy-com"
                log_error "Scapy-com installation failed"
            fi
        else
            track_failure "Scapy-com"
            log_error "Failed to clone Scapy-com"
        fi
    else
        track_success "Scapy-com (already installed)"
    fi
}

# =================================================================================================
# Category 5: Advanced WiFi Attack Frameworks
# =================================================================================================





install_fluxion() {
    log_info "Installing Fluxion..."
    
    if [[ -d "${TOOLS_DIR}/fluxion" ]]; then
        log_info "Fluxion already exists, updating..."
        cd "${TOOLS_DIR}/fluxion"
        if git pull --quiet 2>/dev/null; then
            track_success "Fluxion (updated)"
            log_success "Fluxion updated"
        else
            track_failure "Fluxion update"
            log_error "Fluxion update failed"
        fi
    else
        cd "${TOOLS_DIR}"
        if git clone https://github.com/FluxionNetwork/fluxion.git --quiet 2>/dev/null; then
            track_success "Fluxion"
            log_success "Fluxion installed"
            log_info "Note: Fluxion requires X (graphical) session to run"
        else
            track_failure "Fluxion"
            log_error "Failed to clone Fluxion"
        fi
    fi
}


install_airgeddon() {
    log_info "Installing Airgeddon..."
    
    if [[ -d "${TOOLS_DIR}/airgeddon" ]]; then
        log_info "Airgeddon already exists, updating..."
        cd "${TOOLS_DIR}/airgeddon"
        if git pull --quiet 2>/dev/null; then
            track_success "Airgeddon (updated)"
            log_success "Airgeddon updated"
        else
            track_failure "Airgeddon update"
            log_error "Airgeddon update failed"
        fi
    else
        cd "${TOOLS_DIR}"
        if git clone https://github.com/v1s1t0r1sh3r3/airgeddon.git --quiet 2>/dev/null; then
            track_success "Airgeddon"
            log_success "Airgeddon installed"
        else
            track_failure "Airgeddon"
            log_error "Failed to clone Airgeddon"
        fi
    fi
}

install_creap() {
    log_info "Installing crEAP..."
    
    if [[ -d "${TOOLS_DIR}/creap" ]]; then
        log_info "crEAP already exists, updating..."
        cd "${TOOLS_DIR}/creap"
        if git pull --quiet 2>/dev/null; then
            track_success "crEAP (updated)"
            log_success "crEAP updated"
        else
            track_failure "crEAP update"
            log_error "crEAP update failed"
        fi
    else
        cd "${TOOLS_DIR}"
        if git clone https://github.com/Shellntel/scripts.git creap --quiet 2>/dev/null; then
            track_success "crEAP"
            log_success "crEAP installed"
        else
            track_failure "crEAP"
            log_error "Failed to clone crEAP"
        fi
    fi
}

install_berate_ap() {
    log_info "Installing Berate_ap..."
    
    if [[ -d "${TOOLS_DIR}/berate_ap" ]]; then
        log_info "Berate_ap already exists, updating..."
        cd "${TOOLS_DIR}/berate_ap"
        if git pull --quiet 2>/dev/null; then
            track_success "Berate_ap (updated)"
            log_success "Berate_ap updated"
        else
            track_failure "Berate_ap update"
            log_error "Berate_ap update failed"
        fi
    else
        cd "${TOOLS_DIR}"
        if git clone https://github.com/sensepost/berate_ap.git --quiet 2>/dev/null; then
            track_success "Berate_ap"
            log_success "Berate_ap installed"
        else
            track_failure "Berate_ap"
            log_error "Failed to clone Berate_ap"
        fi
    fi
}

install_wpa_sycophant() {
    log_info "Installing WPA_Sycophant..."
    
    if [[ -d "${TOOLS_DIR}/wpa_sycophant" ]]; then
        log_info "WPA_Sycophant already exists, updating..."
        cd "${TOOLS_DIR}/wpa_sycophant"
        if git pull --quiet 2>/dev/null; then
            track_success "WPA_Sycophant (updated)"
            log_success "WPA_Sycophant updated"
        else
            track_failure "WPA_Sycophant update"
            log_error "WPA_Sycophant update failed"
        fi
    else
        cd "${TOOLS_DIR}"
        if git clone https://github.com/sensepost/wpa_sycophant.git --quiet 2>/dev/null; then
            track_success "WPA_Sycophant"
            log_success "WPA_Sycophant installed"
        else
            track_failure "WPA_Sycophant"
            log_error "Failed to clone WPA_Sycophant"
        fi
    fi
}

# =================================================================================================
# Summary Display
# =================================================================================================

display_summary() {
    echo ""
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${GREEN}      Installation Summary${NC}"
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    
    # Succès
    if [[ ${#INSTALLED_TOOLS[@]} -gt 0 ]]; then
        echo -e "${GREEN}✓ Successfully Installed/Updated (${#INSTALLED_TOOLS[@]}):${NC}"
        for tool in "${INSTALLED_TOOLS[@]}"; do
            echo -e "  ${GREEN}✓${NC} $tool"
        done
        echo ""
    fi
    
    # Échecs
    if [[ ${#FAILED_TOOLS[@]} -gt 0 ]]; then
        echo -e "${RED}✗ Failed to Install (${#FAILED_TOOLS[@]}):${NC}"
        for tool in "${FAILED_TOOLS[@]}"; do
            echo -e "  ${RED}✗${NC} $tool"
        done
        echo ""
    fi
    
    # Skipped
    if [[ ${#SKIPPED_TOOLS[@]} -gt 0 ]]; then
        echo -e "${YELLOW}○ Skipped (${#SKIPPED_TOOLS[@]}):${NC}"
        for tool in "${SKIPPED_TOOLS[@]}"; do
            echo -e "  ${YELLOW}○${NC} $tool"
        done
        echo ""
    fi
    
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}Tools Location: ${TOOLS_DIR}${NC}"
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    
    # Exit code basé sur les résultats
    if [[ ${#FAILED_TOOLS[@]} -gt 0 ]]; then
        echo -e "${YELLOW}⚠ Installation completed with some failures${NC}"
        
    else
        echo -e "${GREEN}✓ All tools installed successfully${NC}"
        return 0
    fi
}

# =================================================================================================
# Main Installation Flow
# =================================================================================================

main() {
    echo -e "${YELLOW}This will install WiFi pentest tools. Continue? [Y/n]${NC}"
    read -r response
    if [[ $response =~ ^[Nn]$ ]]; then
        echo -e "${YELLOW}Installation cancelled${NC}"
        exit 0
    fi
    
    echo ""
    log_info "Starting pentest tools installation..."
    log_info "Installation will continue even if some tools fail"
    echo ""
    
    # Install in categories
    install_basic_tools
    echo ""
    
    install_handshake_tools
    echo ""
    
    
    
    
    
    install_additional_tools
    echo ""
    
    # Python2 tools (optional)
    echo -e "${YELLOW}Install Python2 legacy tools? (deprecated) [y/N]${NC}"
    read -r response
    if [[ $response =~ ^[Yy]$ ]]; then
        install_python2_tools
        echo ""
    fi
    
    # Advanced frameworks
    log_info "Installing advanced WiFi attack frameworks..."
    echo ""
    
    
    
    install_fluxion
    install_airgeddon
    install_creap
    install_berate_ap
    install_wpa_sycophant
    
    # Update locate database
    log_info "Updating locate database..."
    updatedb 2>/dev/null || {
        log_error "updatedb failed"
        track_failure "updatedb"
    }
    
    # Display summary
    display_summary
}

# Run main installation
main "$@"